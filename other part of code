; dot_product_simple.asm
section .data
    vec_u dd 3, 5, 2       ; u = ⟨3, 5, 2⟩
    vec_v dd -1, 3, 0      ; v = ⟨-1, 3, 0⟩
    msg db "Dot product = ", 0
    newline db 10

section .bss
    result resd 1

section .text
    global _start

_start:
    ; Call dot_product(vec_u, vec_v)
    mov esi, vec_u        ; address of vector u
    mov edi, vec_v        ; address of vector v
    call dot_product
    mov [result], eax     ; store result

    ; Print message
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, 15
    int 0x80

    ; Print result
    mov eax, [result]
    call print_number

    ; Print newline
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Exit program
    mov eax, 1
    xor ebx, ebx
    int 0x80

; === dot_product procedure ===
; Input: ESI = u[], EDI = v[]
; Output: EAX = dot product
dot_product:
    mov eax, [esi]        ; eax = u[0]
    imul eax, [edi]       ; eax = u[0] * v[0]

    mov ebx, [esi+4]      ; ebx = u[1]
    imul ebx, [edi+4]     ; ebx = u[1] * v[1]
    add eax, ebx          ; add to result

    mov ecx, [esi+8]      ; ecx = u[2]
    imul ecx, [edi+8]     ; ecx = u[2] * v[2]
    add eax, ecx          ; add to result

    ret

; === print_number procedure ===
; Input: EAX = number to print
print_number:
    mov ecx, 10
    mov edi, buffer + 11
    mov byte [edi], 0
    dec edi
    test eax, eax
    jns .convert
    neg eax
    mov bl, '-'
    mov bh, 1

.convert:
    xor edx, edx
.repeat:
    xor edx, edx
    div ecx
    add dl, '0'
    mov [edi], dl
    dec edi
    test eax, eax
    jnz .repeat

    cmp bh, 1
    jne .print
    mov [edi], bl
    dec edi

.print:
    inc edi
    mov eax, 4
    mov ebx, 1
    mov ecx, edi
    mov edx, buffer + 12
    sub edx, edi
    int 0x80
    ret

section .bss
    buffer resb 12
